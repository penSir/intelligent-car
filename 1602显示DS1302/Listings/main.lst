C51 COMPILER V9.55   MAIN                                                                  02/10/2017 10:56:18 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          
   4          typedef unsigned char uchar;
   5          typedef unsigned int uint;
   6          //DS
   7          sbit SCLK=P1^0;
   8          sbit IO=P1^1;
   9          sbit RST=P1^2;
  10          //LCD
  11          sbit RS=P3^5;
  12          sbit RW=P3^6;
  13          sbit EN=P3^4;
  14          sbit DU=P2^6;
  15          sbit WE=P2^7;
  16          //时间
  17          uchar timedata[7]={50,58,23,15,2,1,16};
  18          //延时函数
  19          void delayms(xms)
  20          {
  21   1        uint i,j;
  22   1        for(i=xms;i>0;i--)
  23   1          for(j=114;j>0;j--);
  24   1      }
  25          //lcd部分
  26          void read_busy()  //检测忙
  27          {
  28   1        uchar i;
  29   1        P0=0XFF;
  30   1        RS=0;
  31   1        RW=1;
  32   1        do{
  33   2          EN=1;
  34   2          i=P0;
  35   2          EN=0;
  36   2        }while(i&0x80);
  37   1      }
  38          void lcd_write_cmd(uchar cmd) //LCD写命令
  39          {
  40   1        read_busy();
  41   1        RS=0;
  42   1        RW=0;
  43   1        P0=cmd;
  44   1        EN=1;
  45   1        EN=0;
  46   1      }
  47          void lcd_write_dat(uchar dat)//LCD写数据
  48          {
  49   1        read_busy();
  50   1        RS=1;
  51   1        RW=0;
  52   1        P0=dat;
  53   1        EN=1;
  54   1        EN=0;
C51 COMPILER V9.55   MAIN                                                                  02/10/2017 10:56:18 PAGE 2   

  55   1      }
  56          /* void LcdSetCursor(uchar x,uchar y)
  57          {
  58            uchar addr;
  59            if(y)
  60              addr|=0x40;
  61            lcd_write_cmd(addr|0x80);
  62          } */
  63          void display_char(uchar x,uchar y,uchar dat)//LCD显示字符
  64          {
  65   1        if(y)
  66   1          x|=0x40;
  67   1        x|=0x80;
  68   1        lcd_write_cmd(x);
  69   1        lcd_write_dat(dat);
  70   1      }
  71          void lcdshow_str(uchar x,uchar y,uchar *str)//LCD显示字符串
  72          {
  73   1        if(y)
  74   1          x|=0x40;
  75   1        x|=0x80;
  76   1        lcd_write_cmd(x);
  77   1        while(*str!='\0')
  78   1          lcd_write_dat(*str++);
  79   1      }
  80          void display_str(uchar x,uchar y,uchar dat)//LCD显示字符串
  81          {
  82   1        display_char (x++,y,dat/16 + '0');
  83   1      //  x=x+1;
  84   1        display_char (x,y,dat%16 + '0');
  85   1      }
  86          /* void display_str(uchar x,uchar y,uchar dat)
  87          {
  88            display_char(x++,y,dat/16+'0');
  89            display_char(x,y,dat%16+'0');
  90          }
  91          void LcdShowStr(uchar x,uchar y,uchar *str)
  92          {
  93            LcdSetCursor(x,y);
  94            while(*str!='\0')
  95            {
  96              lcd_write_dat(*str++);
  97            }
  98          } */
  99          void init() //LCD初始化
 100          {
 101   1        lcd_write_cmd(0x38);
 102   1        lcd_write_cmd(0x0c);
 103   1        lcd_write_cmd(0x06);
 104   1        lcd_write_cmd(0x01);
 105   1      }
 106          //DS写数据
 107          void write_ds(uchar cmd, uchar dat)
 108          {
 109   1        uchar i;
 110   1        RST = 0; 
 111   1        SCLK = 0;
 112   1        RST = 1; 
 113   1        for(i = 0; i < 8; i++)
 114   1        {
 115   2          SCLK = 0;     
 116   2          IO = cmd & 0x01; 
C51 COMPILER V9.55   MAIN                                                                  02/10/2017 10:56:18 PAGE 3   

 117   2          SCLK = 1;     
 118   2          cmd >>=1;     
 119   2        }
 120   1        for(i = 0; i < 8; i++)
 121   1        {
 122   2          SCLK = 0;     
 123   2          IO = dat & 0x01; 
 124   2          SCLK = 1;    
 125   2          dat >>= 1;    
 126   2        }
 127   1      }
 128          //DS读数据
 129          uchar read_ds(uchar cmd)
 130          {
 131   1        uchar i,dat;
 132   1        RST=0;
 133   1        SCLK=0;
 134   1        RST=1;
 135   1        for(i=0;i<8;i++)
 136   1        {
 137   2          SCLK=0;
 138   2          IO=cmd&0x01;
 139   2          SCLK=1;
 140   2          cmd>>=1;
 141   2        }
 142   1        for(i=0;i<8;i++)
 143   1        {
 144   2          SCLK=0;
 145   2          dat>>=1;
 146   2          if(IO)
 147   2            dat|=0x80;
 148   2          SCLK=1;
 149   2        }
 150   1        return dat;
 151   1      }
 152          //dat-bcd
 153          uchar dat_bcd(uchar dat)
 154          {
 155   1        uchar dat1,dat2;
 156   1        dat1=dat/10;
 157   1        dat2=dat%10;
 158   1        dat2=dat2+dat1*16;
 159   1        return dat2;
 160   1      }
 161          //bcd-dat
 162          uchar bcd_dat(uchar dat)
 163          {
 164   1        uchar dat1,dat2;
 165   1        dat1=dat/16;
 166   1        dat2=dat%16;
 167   1        dat2=dat2+dat1*10;
 168   1        return dat2;
 169   1      }
 170          //设置DS时间
 171          void set_ds_time()
 172          {
 173   1        write_ds(0x8e,0);
 174   1        write_ds(0x80,dat_bcd(timedata[0]));
 175   1        write_ds(0x82,dat_bcd(timedata[1]));
 176   1        write_ds(0x84,dat_bcd(timedata[2]));
 177   1        write_ds(0x86,dat_bcd(timedata[3]));
 178   1        write_ds(0x88,dat_bcd(timedata[4]));
C51 COMPILER V9.55   MAIN                                                                  02/10/2017 10:56:18 PAGE 4   

 179   1        write_ds(0x8a,dat_bcd(timedata[5]));
 180   1        write_ds(0x8c,dat_bcd(timedata[6]));
 181   1      }
 182          void read_ds_time(uchar addr)
 183          {
 184   1        uchar i;
 185   1        write_ds(0x8e,0);
 186   1        for(i=0;i<7;i++)
 187   1        {
 188   2          timedata[i]=read_ds(addr);
 189   2          addr+=2;
 190   2        }
 191   1        write_ds(0x8e,0x80);
 192   1      }
 193          void show_time()
 194          {
 195   1        display_char(7,0,'-');
 196   1        display_char(10,0,'-');
 197   1        display_char(13,0,'-');
 198   1        display_char(8,1,':');
 199   1        display_char(11,1,':');
 200   1        display_str(12,1,timedata[0]);
 201   1        display_str(9,1,timedata[1]);
 202   1        display_str(6,1,timedata[2]);
 203   1        display_str(14,0,timedata[3]);
 204   1        display_str(11,0,timedata[4]);
 205   1        display_str(8,0,timedata[5]);
 206   1        display_str(5,0,timedata[6]);
 207   1      } 
 208          void main()
 209          {
 210   1        uchar test[]={"hello"};
 211   1        set_ds_time();
 212   1        DU=0;
 213   1        WE=0;
 214   1        init();
 215   1        lcdshow_str(0,0,"Date:");
 216   1        lcdshow_str(0,1,"Time:");
 217   1        while(1)
 218   1        {
 219   2          read_ds_time(0x81);
 220   2          show_time();
 221   2          delayms(1000);
 222   2        }
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    606    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
